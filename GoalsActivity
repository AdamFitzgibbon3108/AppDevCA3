package com.example.myapplication;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.ArrayList;
import java.util.List;

public class GoalsActivity extends Activity {

    private RecyclerView recyclerViewGoals;
    private GoalAdapter goalAdapter;
    private List<Goal> goalList = new ArrayList<>();
    private DatabaseReference userGoalsRef; // Reference to the user's goals in Firebase

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_goal); // Using activity_goal.xml layout

        // Initialize UI elements
        recyclerViewGoals = findViewById(R.id.recyclerViewGoals);
        Button addGoalButton = findViewById(R.id.addGoalButton);
        Button backToMainButton = findViewById(R.id.backToMainButton);

        // Set up RecyclerView
        recyclerViewGoals.setLayoutManager(new LinearLayoutManager(this));
        goalAdapter = new GoalAdapter(goalList, new GoalAdapter.OnGoalActionListener() {
            @Override
            public void onEdit(Goal goal) {
                onEditGoal(goal);
            }

            @Override
            public void onDelete(Goal goal) {
                onDeleteGoal(goal);
            }
        });
        recyclerViewGoals.setAdapter(goalAdapter);

        // Get the current authenticated user
        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        if (user != null) {
            // **Change:** Reference goals under the user's UID
            DatabaseReference usersRef = FirebaseDatabase.getInstance().getReference("users");
            userGoalsRef = usersRef.child(user.getUid()).child("goals");
            fetchGoals(); // Fetch the current user's goals
        } else {
            Toast.makeText(this, "User not logged in", Toast.LENGTH_SHORT).show();
        }

        // Button to add a new goal
        addGoalButton.setOnClickListener(v -> showAddGoalDialog());

        // Button to return to MainActivity
        if (backToMainButton != null) {
            backToMainButton.setOnClickListener(v -> {
                Intent intent = new Intent(GoalsActivity.this, MainActivity.class);
                startActivity(intent);
                finish();
            });
        }
    }

    // **Change:** Fetch goals specific to the logged-in user
    private void fetchGoals() {
        userGoalsRef.addValueEventListener(new com.google.firebase.database.ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                goalList.clear();
                for (DataSnapshot goalSnapshot : snapshot.getChildren()) {
                    Goal goal = goalSnapshot.getValue(Goal.class);
                    if (goal != null) {
                        goalList.add(goal);
                    }
                }
                goalAdapter.notifyDataSetChanged();
            }

            @Override
            public void onCancelled(DatabaseError error) {
                Toast.makeText(GoalsActivity.this, "Failed to fetch goals", Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Show a dialog to add a new goal
    private void showAddGoalDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_add_goal, null);
        builder.setView(dialogView);

        EditText titleField = dialogView.findViewById(R.id.goalTitleField);
        EditText descriptionField = dialogView.findViewById(R.id.goalDescriptionField);
        EditText dateField = dialogView.findViewById(R.id.goalDateField);

        builder.setPositiveButton("Add", (dialog, which) -> {
            String title = titleField.getText().toString().trim();
            String description = descriptionField.getText().toString().trim();
            String date = dateField.getText().toString().trim();

            if (!TextUtils.isEmpty(title) && !TextUtils.isEmpty(description)) {
                createGoal(title, description, date); // Add goal to Firebase
            } else {
                Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
            }
        });

        builder.setNegativeButton("Cancel", null);
        builder.create().show();
    }

    // **Change:** Save goal under the user's UID
    private void createGoal(String title, String description, String date) {
        String goalId = userGoalsRef.push().getKey();
        Goal newGoal = new Goal(goalId, title, description, date);

        if (goalId != null) {
            userGoalsRef.child(goalId).setValue(newGoal).addOnCompleteListener(task -> {
                if (task.isSuccessful()) {
                    Toast.makeText(this, "Goal added successfully", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(this, "Failed to add goal", Toast.LENGTH_LONG).show();
                }
            });
        }
    }

    // **Change:** Update goal in the user's UID branch
    private void onEditGoal(Goal goal) {
        showEditGoalDialog(goal);
    }

    private void onDeleteGoal(Goal goal) {
        userGoalsRef.child(goal.getId()).removeValue().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                Toast.makeText(this, "Goal deleted successfully", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Failed to delete goal", Toast.LENGTH_LONG).show();
            }
        });
    }

    private void showEditGoalDialog(Goal goal) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_add_goal, null);
        builder.setView(dialogView);

        EditText titleField = dialogView.findViewById(R.id.goalTitleField);
        EditText descriptionField = dialogView.findViewById(R.id.goalDescriptionField);
        EditText dateField = dialogView.findViewById(R.id.goalDateField);

        titleField.setText(goal.getTitle());
        descriptionField.setText(goal.getDescription());
        dateField.setText(goal.getDate());

        builder.setPositiveButton("Update", (dialog, which) -> {
            String title = titleField.getText().toString().trim();
            String description = descriptionField.getText().toString().trim();
            String date = dateField.getText().toString().trim();

            if (!TextUtils.isEmpty(title) && !TextUtils.isEmpty(description)) {
                goal.setTitle(title);
                goal.setDescription(description);
                goal.setDate(date);

                userGoalsRef.child(goal.getId()).setValue(goal).addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        Toast.makeText(this, "Goal updated successfully", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(this, "Failed to update goal", Toast.LENGTH_LONG).show();
                    }
                });
            } else {
                Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
            }
        });

        builder.setNegativeButton("Cancel", null);
        builder.create().show();
    }
}
